package edu.ntnu.stud.service;

import edu.ntnu.stud.model.UserHistoryRequest;
import edu.ntnu.stud.model.base.UserHistory;
import edu.ntnu.stud.repo.UserHistoryRepo;
import edu.ntnu.stud.util.Validate;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Service class for managing user history in the system.
 */
@Service
public class UserHistoryService {
  
  @Autowired
  private UserHistoryRepo userHistoryRepo;
  @Autowired
  private JWTService jwtService;
  @Autowired
  private UserService userService;
  @Autowired
  private ListingService listingService;

  /**
   * Adds a new user history entry to the system.
   *
   * @param userHistoryRequest the user history entry to be added
   * @param token the JWT token containing user claims
   * 
   */
  public void addUserHistory(UserHistoryRequest userHistoryRequest, String token) {
    Validate.that(userHistoryRequest.getListingId(), Validate.isNotBlankOrNull(),
        "Listing ID must not be empty or null");
    long userId = jwtService.extractUserId(token.substring(7));
    UserHistory userHistory = new UserHistory(
        0, // ID is auto-generated by the database
        userId,
        null, // Timestamp is set to the current time in the database
        userHistoryRequest.getListingId()
    );
    userHistoryRepo.addUserHistory(userHistory);
  }

  /**
   * Adds a new user history entry to the system.
   *
   * @param userHistory the user history entry to be added
   */
  public void addUserHistory(UserHistory userHistory) {
    Validate.that(listingService.getListingByUuid(userHistory.getListingId()), Validate.isNotNull(),
        "Listing with ID " + userHistory.getListingId() + " does not exist");
    Validate.that(userService.getUserById(userHistory.getUserId()), Validate.isNotNull(),
        "User with ID " + userHistory.getUserId() + " does not exist");
    userHistoryRepo.addUserHistory(userHistory);
  }

  /**
   * Retrieves the user history for a specific user.
   *
   * @param token the JWT token containing user claims
   * @return a list of UserHistory objects representing the user's history
   */
  public List<UserHistory> getUserHistory(String token) {
    long userId = jwtService.extractUserId(token.substring(7));
    return userHistoryRepo.getUserHistory(userId);
  }
}
